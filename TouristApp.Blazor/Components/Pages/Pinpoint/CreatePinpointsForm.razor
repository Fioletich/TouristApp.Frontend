@using System.Globalization
@using System.Text.Json
@using TouristApp.Blazor.Models
@using TouristApp.Blazor.Models.Pinpoints
@using TouristApp.Blazor.Services.Categories
@using TouristApp.Blazor.Services.Pinpoints
@using TouristApp.Blazor.Services.PinpointCategoryService
@using TouristApp.Blazor.Services.TouristRoutes
@using TouristApp.Blazor.Utils
@inject IPinpointService PinpointService
@inject ICategoryService CategoryService
@inject IPinpointCategoryService PinpointCategoryService
@inject ITouristRouteService TouristRouteService 
@inject IJSRuntime JS
@inject NavigationManager NavManager

<!DOCTYPE html>

<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
</head>
<body class="flex-column">
@if (_isLoaded)
{
    <section class="untitled-page mapCoordinatesSection" style="--src:url(../assets/38414e2776364ef6203ce0219080c1ab.png)">
        <!-- Map coordinates and point details section -->
        <div class="contentWrapper">
            <figure id="map" class="mapPreview"></figure>
            <div class="formContainer">
                <div class="pointDetailsGroup">
                    <p class="categoryHeader" style="color: #000000">Создать точку</p>
                    <p class="pointNameLabel" style="color: #000000">Название точки:</p>
                    <div class="pointNameInput">
                        <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" placeholder="Название точки" type="text" @bind-value="@_pinpointForCreate.Name">
                    </div>
                    <p class="descriptionLabel" style="color: #000000">Описание:</p>
                    <div class="descriptionInput">
                        <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" type="text" placeholder="Описание точки" @bind-value="@_pinpointForCreate.Description">
                    </div>
                    <p class="coordinatesLabel" style="color: #000000">Координаты точки:</p>
                    <div class="coordinatesDisplay">
                        <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" placeholder="Координаты: X.xxxxxx, Y.yyyyyy" type="text" @bind-value="@_coordinates">
                    </div>
                </div>
                <button class="setPointBtn" type="submit" @onclick="SavePinpoint">
                    Установить точку
                </button>
                <div class="actionGroup">
                    <p class="categoryHeader" style="color: #000000">Добавить в категорию</p>
                    <p class="categoryLabel" style="color: #000000">Категория:</p>
                    <div class="descriptionInput">
                        <form>
                            <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="@_category.Id">
                                <option value="00000000-0000-0000-0000-000000000000">Выберите категорию</option>
                                @foreach (var category in _categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                        </form>
                    </div>
                </div>
                <button class="addPointBtn" @onclick="AddCategory">
                    <!-- TODO -->
                    Добавить
                </button>

                <div class="pointEditColumn">
                    <!-- Column for editing point data -->
                    <p class="categoryHeader" style="color: #000000">Изменить точку</p>
                    <h2 class="categoryLabel" style="color:#000000">Выбрать точку:</h2>
                    <form>
                        <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="@_pinpointForUpdate.Id">
                            <option value="00000000-0000-0000-0000-000000000000">Выберите точку</option>
                            @foreach (var pinpoint in _pinpoints)
                            {
                                <option value="@pinpoint.Id">@pinpoint.Name</option>
                            }
                        </select>
                    </form>
                    <div class="actionGroup">
                        
                        <h2 class="categoryLabel" style="color:#000000">Название точки:</h2>
                        <div class="pointNameInput">
                            <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" type="text" placeholder="Название точки" @bind-value="@_pinpointForUpdate.Name">
                        </div>
                        <h2 class="categoryLabel" style="color:#000000">Описание:</h2>
                        <div class="pointDescriptionInput">
                            <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" type="text" placeholder="Описание точки" @bind-value="@_pinpointForUpdate.Description">
                        </div>
                        <h2 class="categoryLabel" style="color:#000000">Координаты точки:</h2>
                        <div class="coordinatesDisplay">
                            <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" type="text" placeholder="Координаты: X.xxxxxx, Y.yyyyyy" @bind-value="@_coordinatesForUpdate">
                        </div>
                    </div>
                    <div>
                        <button class="addPointBtn" @onclick="UpdatePinpoint">
                            <!-- TODO -->
                            Сохранить изменения
                        </button>
                    </div>
                </div>
                <div>
                    <p class="categoryHeader" style="color: #000000">Удалить точку</p>
                    <h2 class="categoryLabel" style="color:#000000">Выбрать точку:</h2>
                    <form class="coordinatesDisplay">
                        <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="@_pinpointForDelete.Id">
                            <option value="00000000-0000-0000-0000-000000000000">Выберите точку</option>
                            @foreach (var pinpoint in _pinpoints)
                            {
                            <option value="@pinpoint.Id">@pinpoint.Name</option>
                            }
                        </select>
                    </form>
                    <button class="addPointBtn" @onclick="DeletePinpoint">
                        <!-- TODO -->
                        Удалить
                    </button>
                </div>
            </div>
        </div>
    </section>
}
</body>
</html>

@code {
    private Category[] _categories;
    private Category _category;
    
    private Pinpoint[] _pinpoints;
    private StringPinpoint _pinpointForCreate;
    private StringPinpoint _pinpointForUpdate;
    private StringPinpoint _pinpointForDelete;

    private TouristRoute[] _touristRoutes;

    private PinpointCategory[] _pinpointCategories;
    
    private string _coordinates;
    private string _coordinatesForUpdate;
    
    private bool _isLoaded;

    async protected override Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
        {
            await Task.Delay(1000);
            await JS.InvokeVoidAsync("init");
        }
    }

    async protected override Task OnInitializedAsync() {
        _pinpointForCreate = new StringPinpoint()
        {
            Name = string.Empty,
            Description = string.Empty,
            XCoordinate = string.Empty,
            YCoordinate = string.Empty
        };
        
        _pinpointForUpdate = new StringPinpoint()
        {
            Name = string.Empty,
            Description = string.Empty,
            XCoordinate = string.Empty,
            YCoordinate = string.Empty
        };
        
        _pinpointForDelete = new StringPinpoint()
        {
            Name = string.Empty,
            Description = string.Empty,
            XCoordinate = string.Empty,
            YCoordinate = string.Empty
        };

        _category = new Category();

        _coordinates = string.Empty;
        _coordinatesForUpdate = string.Empty;
        
        _categories = await CategoryService.GetAll();
        _pinpoints = await PinpointService.GetAll();
        _touristRoutes = await TouristRouteService.GetAll();
        _pinpointCategories = await PinpointCategoryService.GetAll();
            
        _isLoaded = true;
    }

    private async Task SavePinpoint() {
        if (_pinpointForCreate.Name != string.Empty && 
            _pinpointForCreate.Description != string.Empty && 
            _coordinates != string.Empty)
        {
            string[] coordinates = _coordinates.Trim().Split(',');
            _pinpointForCreate.XCoordinate = coordinates[0];
            _pinpointForCreate.YCoordinate = coordinates[1];
            
            _pinpointForCreate.Id = await PinpointService.Post(_pinpointForCreate);

            var pinpoint = new Pinpoint()
            {
                Name = _pinpointForCreate.Name,
                Description = _pinpointForCreate.Description,
                XCoordinate = Mapper.ConvertStringToDecimal(_pinpointForCreate.XCoordinate),
                YCoordinate = Mapper.ConvertStringToDecimal(_pinpointForCreate.YCoordinate)
            };
            
            await JS.InvokeVoidAsync("buildRoute",
                JsonSerializer
                    .Serialize(new[] { Mapper.MapJsPinpoint(pinpoint) }));
            
            _pinpointForCreate.Name = string.Empty;
            _pinpointForCreate.Description = string.Empty;
            _pinpointForCreate.XCoordinate = string.Empty;
            _pinpointForCreate.YCoordinate = string.Empty;
            
            NavManager.ReloadPage();
        }
    }

    private async Task AddCategory() {
        if (_category.Id != Guid.Empty)
        {
            await PinpointCategoryService.Post(new PinpointCategory()
            {
                CategoryId = _category.Id,
                PinpointId = _pinpointForCreate.Id
            });
        }
    }

    private async Task UpdatePinpoint() {
        if (_pinpointForUpdate.Name != string.Empty &&
            _pinpointForUpdate.Description != string.Empty &&
            _pinpointForUpdate.Id != Guid.Empty &&
            _coordinatesForUpdate != string.Empty)
        {
            string[] coordinates = _coordinatesForUpdate.Trim().Split(',');
            _pinpointForUpdate.XCoordinate = coordinates[0];
            _pinpointForUpdate.YCoordinate = coordinates[1];
            
            await PinpointService.Update(_pinpointForUpdate);

            _pinpointForUpdate.Name = string.Empty;
            _pinpointForUpdate.Description = string.Empty;
            _coordinatesForUpdate = string.Empty;

            NavManager.ReloadPage();
        }

        if (_pinpointForUpdate.Id != Guid.Empty)
        {
            var pinpointForUpdate = await PinpointService.Get(_pinpointForUpdate.Id);

            _pinpointForUpdate.Name = pinpointForUpdate.Name;
            _pinpointForUpdate.Description = pinpointForUpdate.Description;

            string xCoordinate = pinpointForUpdate.XCoordinate
                .ToString(CultureInfo.InvariantCulture).Replace(',', '.');
            string yCoordinate = pinpointForUpdate.YCoordinate
                .ToString(CultureInfo.InvariantCulture).Replace(',', '.');

            _coordinatesForUpdate = $"{xCoordinate}, {yCoordinate}";
        }
    }
    
    private async Task DeletePinpoint() {
        if (_pinpointForDelete.Id != Guid.Empty)
        {
            await PinpointService.Delete(_pinpointForDelete.Id);

            var trsids = _touristRoutes
                .Where(tr => tr.PinpointId == _pinpointForDelete.Id)
                .Select(tr => tr.Id);

            var pcids = _pinpointCategories
                .Where(pc => pc.PinpointId == _pinpointForDelete.Id)
                .Select(pc => pc.Id);

            foreach (var id in trsids)
            {
                await TouristRouteService.Delete(id);
            }

            foreach (var id in pcids)
            {
                await PinpointCategoryService.Delete(id);
            }
            
            NavManager.ReloadPage();
        }
    }
}