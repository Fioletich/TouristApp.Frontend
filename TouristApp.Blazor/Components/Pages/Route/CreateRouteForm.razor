@using System.Text.Json
@using TouristApp.Blazor.Models
@using TouristApp.Blazor.Models.Pinpoints
@using TouristApp.Blazor.Services.Pinpoints
@using TouristApp.Blazor.Services.Routes
@using TouristApp.Blazor.Services.TouristRoutes
@using TouristApp.Blazor.Utils
@inject IRouteService RouteService 
@inject IPinpointService PinpointService 
@inject ITouristRouteService TouristRouteService
@inject IJSRuntime JS
@inject NavigationManager NavManager

<!DOCTYPE html>

<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
</head>

<body class="flex-column">
@if (_isLoaded)
{
    <section class="untitled-page1 routeManagementSection" style="--src:url(../assets/38414e2776364ef6203ce0219080c1ab.png)">
        <!-- Route Management Section -->
        <div class="contentWrapper">
            <aside class="sidebarContainer" id="map"></aside>
            <main class="mainContentContainer">
                <div class="routeInfoContainer">
                    <p class="linkRoutePointTitle" style="color: #000000">Создать путь</p>
                    <p class="routeNameLabel" style="color: #000000">Название пути:</p>
                    <div class="routeNameInput">
                        <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" type="text" placeholder="Название:" @bind-value="@_routeForCreate.Name">
                    </div>
                    <p class="routeDescriptionLabel" style="color: #000000">Описание:</p>
                    <div class="routeDescriptionInput">
                        <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" type="text" placeholder="Описание:" @bind-value="@_routeForCreate.Description">
                    </div>
                </div>
                <div class="routeActionContainer">
                    <button class="addRouteBtn" @onclick="CreateRoute">
                        <!-- TODO -->
                        Добавить
                    </button>
                    <!-- Column for editing path and category data -->
                    <p class="linkRoutePointTitle" style="color: #000000">Изменить маршрут</p>
                    <p class="routeListLabel" style="color: #000000">Список маршрутов:</p>
                    <form>
                        <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="_routeForUpdate.Id">
                            <option value="00000000-0000-0000-0000-000000000000">Выберите маршрут</option>
                            @foreach (var route in _routes)
                            {
                            <option value="@route.Id">@route.Name</option>
                            }
                        </select>
                    </form>
                    <h2 class="routeListLabel" style="color:#000000">Название пути:</h2>
                    <div class="pathNameInput">
                        <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" type="text" placeholder="Название:" @bind-value="@_routeForUpdate.Name">
                    </div>
                    <h2 class="routeListLabel" style="color:#000000">Описание:</h2>
                    <div class="pathDescriptionInput">
                        <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" type="text" placeholder="Описание:" @bind-value="@_routeForUpdate.Description">
                    </div>
                    <button class="confirmBtn" @onclick="UpdateRoute">
                        <!-- TODO -->
                        Сохранить изменения
                    </button>
                    <!-- Column for editing path and category data -->
                    <p class="linkRoutePointTitle" style="color: #000000">Удалить маршрут</p>
                    <h2 class="routeListLabel" style="color:#000000">Выбрать маршрут:</h2>
                    <form>
                        <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="@_routeForDelete.Id">
                            <option value="00000000-0000-0000-0000-000000000000">Выберите маршрут</option>
                            @foreach (var route in _routes)
                            {
                            <option value="@route.Id">@route.Name</option>
                            }
                        </select>
                    </form>
                    <button class="confirmBtn" @onclick="DeleteRoute">
                        <!-- TODO -->
                        Удалить
                    </button>
                    <p class="linkRoutePointTitle" style="color: #000000">Связать путь и точку</p>
                    <p class="routeListLabel" style="color: #000000">Список путей:</p>
                    <form>
                        <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="@_selectedRoute.Id">
                            <option value="00000000-0000-0000-0000-000000000000">Выберите маршрут</option>
                            @foreach (var route in _routes)
                            {
                            <option value="@route.Id">@route.Name</option>
                            }
                        </select>
                    </form>
                    <p class="pointListLabel" style="color: #000000">Список точек:</p>
                    <form>
                        <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="@_selectedPinpoint.Id">
                            <option value="00000000-0000-0000-0000-000000000000">Выберите точку</option>
                            @foreach (var pinpoint in _pinpoints)
                            {
                            <option value="@pinpoint.Id">@pinpoint.Name</option>
                            }
                        </select>
                    </form>
                </div>
                <button class="confirmBtn" @onclick="CreateTouristRoute">
                    <!-- TODO -->
                    Подтвердить
                </button>
                <div>
                    <p class="linkRoutePointTitle" style="color: #000000">Показать маршрут</p>
                    <p class="routeListLabel" style="color: #000000">Список маршрутов:</p>
                    <form>
                        <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="@_buildRoute.Id">
                            <option value="00000000-0000-0000-0000-000000000000">Выберите маршрут</option>
                            @foreach (var route in _routes)
                            {
                            <option value="@route.Id">@route.Name</option>
                            }
                        </select>
                    </form>
                    <button class="confirmBtn" @onclick="ShowRoute">
                        <!-- TODO -->
                        Показать
                    </button>
                </div>
            </main>
        </div>
    </section>
}
</body>
</html>

@code {
    private Route _routeForCreate;
    private Route _routeForUpdate;
    private Route _routeForDelete;
    private Route _selectedRoute;
    private Route _buildRoute;
    private Route[] _routes;
    
    private Pinpoint _selectedPinpoint;
    private Pinpoint[] _pinpoints;

    private TouristRoute[] _touristRoutes;
    
    private bool _isLoaded;

    async protected override Task OnInitializedAsync() {
        _routeForCreate = new Route()
        {
            Name = string.Empty,
            Description = string.Empty
        };
        
        _routeForUpdate = new Route()
        {
            Name = string.Empty,
            Description = string.Empty
        };
        
        _routeForDelete = new Route()
        {
            Name = string.Empty,
            Description = string.Empty
        };

        _selectedRoute = new Route()
        {
            Name = string.Empty,
            Description = string.Empty
        };

        _selectedPinpoint = new Pinpoint()
        {
            Name = string.Empty,
            Description = string.Empty,
        };

        _buildRoute = new Route();
        
        _routes = await RouteService.GetAll();
        _pinpoints = await PinpointService.GetAll();
        _touristRoutes = await TouristRouteService.GetAll();
            
        _isLoaded = true;
    }

    async protected override Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
        {
            await Task.Delay(1000);
            await JS.InvokeVoidAsync("init");
        }
    }

    private async Task CreateRoute() {
        if (_routeForCreate.Name != string.Empty && _routeForCreate.Description != string.Empty)
        {
            await RouteService.Post(_routeForCreate);

            _routeForCreate.Name = string.Empty;
            _routeForCreate.Description = string.Empty;
            
            NavManager.ReloadPage();
        }
    }

    private async Task CreateTouristRoute() {
        if (_selectedRoute.Id != Guid.Empty && _selectedPinpoint.Id != Guid.Empty)
        {
            await TouristRouteService.Post(new TouristRoute()
            {
                PinpointId = _selectedPinpoint.Id,
                RouteId = _selectedRoute.Id
            });

            await BuildRoute(_selectedRoute.Id);
        }
    }
    
    private async Task ShowRoute() {
        await BuildRoute(_buildRoute.Id);
    }
    
    private async Task BuildRoute(Guid routeId) {
        var route = await RouteService.Get(routeId);

        var touristRoutes = (await TouristRouteService.GetAll())
            .Where(tr => tr.RouteId == route.Id);
        var pinPoints = new List<JSPinpoint>();

        foreach (var touristRoute in touristRoutes)
        {
            pinPoints.Add(Mapper.MapJsPinpoint((await PinpointService.Get(touristRoute.PinpointId))));
        }

        await JS.InvokeVoidAsync("buildRoute", JsonSerializer.Serialize(pinPoints));
    }
    
    private async Task UpdateRoute() {
        if (_routeForUpdate.Name != string.Empty &&
            _routeForUpdate.Description != string.Empty &&
            _routeForUpdate.Id != Guid.Empty)
        {
            await RouteService.Update(_routeForUpdate);

            _routeForUpdate.Name = string.Empty;
            _routeForUpdate.Description = string.Empty;
            
            NavManager.ReloadPage();
        }

        if (_routeForUpdate.Id != Guid.Empty)
        {
            var route = await RouteService.Get(_routeForUpdate.Id);

            _routeForUpdate.Name = route.Name;
            _routeForUpdate.Description = route.Description;
        }
    }
    
    private async Task DeleteRoute() {
        if (_routeForDelete.Id != Guid.Empty)
        {
            await RouteService.Delete(_routeForDelete.Id);
            
            var trsids = _touristRoutes
                .Where(tr => tr.RouteId == _routeForDelete.Id)
                .Select(tr => tr.Id);

            foreach (var id in trsids)
            {
                await TouristRouteService.Delete(id);
            }
            
            NavManager.ReloadPage();
        }
    }
}