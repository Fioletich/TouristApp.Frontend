@using TouristApp.Blazor.Models
@using TouristApp.Blazor.Services.Categories
@using TouristApp.Blazor.Services.PinpointCategoryService
@using TouristApp.Blazor.Utils
@inject ICategoryService CategoryService
@inject IPinpointCategoryService PinpointCategoryService
@inject IJSRuntime JS
@inject NavigationManager NavManager

<!DOCTYPE html>

<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
</head>

<body class="flex-column">
@if (_isLoaded)
{
    <section class="untitled-page2 categorySection" style="--src:url(../assets/38414e2776364ef6203ce0219080c1ab.png)">
        <!-- Category management section -->
        <div class="categoryContainer">
            <div id="map" class="colorPreview"></div>
            <div class="categoryDetails">
                <form class="categoryForm">
                    <label class="categoryNameLabel" style="color:#000000">Создать категорию:</label>
                    <label class="categoryNameLabel" style="color:#000000">Название категории:</label>
                    <div class="categoryNameInput">
                        <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" placeholder="Название" type="text" @bind-value="@_categoryForCreate.Name">
                    </div>
                    <label class="categoryDescriptionLabel" style="color:#000000">Описание:</label>
                    <div class="categoryNameInput">
                        <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" placeholder="Описание" type="text" @bind-value="@_categoryForCreate.Description">
                    </div>
                </form>
                <button class="addCategoryBtn" @onclick="CreateCategory">
                    <!-- TODO -->
                    Добавить
                </button>
                <label class="categoryNameLabel" style="color:#000000">Изменить категорию:</label>
                <h2 class="categoryNameLabel" style="color:#000000">Выбрать категорию:</h2>
                <form>
                    <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="@_categoryForUpdate.Id">
                        <option value="00000000-0000-0000-0000-000000000000">Выберите категорию</option>
                        @foreach (var category in _categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </form>
                <h2 class="categoryNameLabel" style="color:#000000">Название категории:</h2>
                <div class="categoryNameInput">
                    <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" placeholder="Название" type="text" @bind-value="@_categoryForUpdate.Name">
                </div>
                <h2 class="categoryNameLabel" style="color:#000000">Описание:</h2>
                <div class="categoryDescriptionInput">
                    <input style="display:table-cell; width:100%; height: 100%; font-size: medium;" placeholder="Описание" type="text" @bind-value="@_categoryForUpdate.Description">
                </div>
                <button class="addCategoryBtn" @onclick="UpdateCategory">
                    <!-- TODO -->
                    Сохранить изменения
                </button>
                <label class="categoryNameLabel" style="color:#000000">Удалить категорию:</label>
                <h2 class="categoryNameLabel" style="color:#000000">Выбрать категорию:</h2>
                <form>
                    <select style="display:table-cell; width:100%; height: 100%; font-size: medium;" id="category-select" @bind="@_categoryForDelete.Id">
                        <option value="00000000-0000-0000-0000-000000000000">Выберите категорию</option>
                        @foreach (var category in _categories)
                        {
                        <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </form>
                <button class="addCategoryBtn" @onclick="DeleteCategory">
                    <!-- TODO -->
                    Удалить
                </button>
            </div>
        </div>
    </section>
}
</body>
</html>

@code {
    private Category _categoryForCreate;
    private Category _categoryForUpdate;
    private Category _categoryForDelete;
    private Category[] _categories;

    private PinpointCategory[] _pinpointCategories;

    private bool _isLoaded;

    async protected override Task OnInitializedAsync() {
        _categoryForCreate = new Category()
        {
            Name = string.Empty,
            Description = string.Empty
        };
        
        _categoryForUpdate = new Category()
        {
            Name = string.Empty,
            Description = string.Empty
        };
        
        _categoryForDelete = new Category()
        {
            Name = string.Empty,
            Description = string.Empty
        };

        _categories = await CategoryService.GetAll();

        _pinpointCategories = await PinpointCategoryService.GetAll();

        _isLoaded = true;
    }

    async protected override Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
        {
            await Task.Delay(1000);
            await JS.InvokeVoidAsync("init");
        }
    }

    private async Task CreateCategory() {
        if (_categoryForCreate.Name != string.Empty && _categoryForCreate.Description != string.Empty)
        {
            await CategoryService.Post(_categoryForCreate);

            _categoryForCreate.Name = string.Empty;
            _categoryForCreate.Description = string.Empty;
            NavManager.ReloadPage();
        } 
    }
    private async Task UpdateCategory() {
        if (_categoryForUpdate.Name != string.Empty &&
            _categoryForUpdate.Description != string.Empty &&
            _categoryForUpdate.Id != Guid.Empty)
        {
            await CategoryService.Update(_categoryForUpdate);

            _categoryForUpdate.Name = string.Empty;
            _categoryForUpdate.Description = string.Empty;
            
            NavManager.ReloadPage();
        }

        if (_categoryForUpdate.Id != Guid.Empty)
        {
            var category = await CategoryService.Get(_categoryForUpdate.Id);

            _categoryForUpdate.Name = category.Name;
            _categoryForUpdate.Description = category.Description;
        }
    }
    private async Task DeleteCategory() {
        if (_categoryForDelete.Id != Guid.Empty)
        {
            await CategoryService.Delete(_categoryForDelete.Id);
            
            var pcids = _pinpointCategories
                .Where(pc => pc.CategoryId == _categoryForDelete.Id)
                .Select(pc => pc.Id);
            
            foreach (var id in pcids)
            {
                await PinpointCategoryService.Delete(id);
            }
            
            NavManager.ReloadPage();
        }
    }
}